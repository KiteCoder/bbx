{"version":3,"sources":["web-build/register-service-worker.js","Threshold.js","App.js","index.js"],"names":["navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","Threshold","styles","StyleSheet","create","slider","flex","padding","justifyContent","backgroundColor","buttonContainer","flexDirection","alignItems","marginTop","button","middleButton","borderLeftWidth","borderRightWidth","borderColor","sensor","paddingHorizontal","text","textAlign","balanceContainer","offContainer","registerRootComponent","useKeepAwake","useState","balanceState","setBalanceState","seconds","setSeconds","times","setTimes","xThreshold","setXThreshold","yThreshold","setYThreshold","xThresholdRef","useRef","yThresholdRef","isActiveRef","secondsRef","_subscription","_currentPosition","useEffect","interval","current","setInterval","updateTime","Math","round","clearInterval","_evaluateCurrentPosition","insideBound","x","y","_subscribe","DeviceMotionEvent","requestPermission","response","Gyroscope","addListener","gyroscopeData","_unsubscribe","remove","View","style","Text","className","TouchableOpacity","onPress","maximumValue","minimumValue","minimumTrackTintColor","maximumTrackTintColor","step","name","value","onValueChange","map","time"],"mappings":"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","file":"static/js/app.05023ebb.chunk.js","sourcesContent":["/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/bbx/expo-service-worker.js', { scope: '/bbx/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","/**\r\n * Balance Thresholds \r\n */\r\nexport const Threshold = {\r\n    POSITIVE_X: 2.3,\r\n    POSITIVE_Y: 4.3\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { StyleSheet, Dimensions, Text, TouchableOpacity, View } from 'react-native';\r\nimport { useKeepAwake } from 'expo-keep-awake';\r\nimport { Gyroscope } from 'expo-sensors';\r\nimport { Threshold } from './Threshold';\r\nimport Slider from '@react-native-community/slider';\r\n\r\nexport default function App() {\r\n\r\n  const PRECISION = 10;\r\n  useKeepAwake();\r\n\r\n  const [balanceState, setBalanceState] = useState(false);\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [times, setTimes] = useState([]);\r\n\r\n  const [xThreshold, setXThreshold] = useState(Threshold.POSITIVE_X);\r\n  const [yThreshold, setYThreshold] = useState(Threshold.POSITIVE_Y);\r\n\r\n  const xThresholdRef = useRef(xThreshold);\r\n  const yThresholdRef = useRef(yThreshold);\r\n\r\n  const isActiveRef = useRef();\r\n  const secondsRef = useRef(seconds);\r\n\r\n  let _subscription = null;\r\n  let _positionPollIntervalId = null;\r\n\r\n  let _currentPosition = {};\r\n\r\n  const _reset = () => {\r\n    setSeconds(0.0);\r\n    isActiveRef.current = false;\r\n  }\r\n\r\n  const _setPositionPollInterval = () => {\r\n    _positionPollIntervalId = setInterval(() => {\r\n      _evaluateCurrentPosition();\r\n    }, 500);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (isActiveRef.current) {\r\n      interval = setInterval(() => {\r\n        const updateTime = Math.round(seconds * PRECISION + 0.1 * PRECISION) / PRECISION;\r\n        setSeconds(seconds => updateTime);\r\n        secondsRef.current = updateTime;\r\n      }, 100);\r\n    } else if (!isActiveRef.current && seconds !== 0) {\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [isActiveRef.current, seconds]);\r\n\r\n  const _toggle = () => {\r\n    if (_subscription) {\r\n      _unsubscribe();\r\n      isActiveRef.current = false;\r\n    } else {\r\n      _subscribe();\r\n      isActiveRef.current = true;\r\n      _setPositionPollInterval();\r\n    }\r\n  };\r\n\r\n  const _evaluateCurrentPosition = () => {\r\n\r\n    let insideBound = true;\r\n\r\n    if (_currentPosition.x > xThresholdRef.current ||\r\n      _currentPosition.x < (-1) * xThresholdRef.current||\r\n      _currentPosition.y > yThresholdRef.current ||\r\n      _currentPosition.y < (-1) * yThresholdRef.current) {\r\n\r\n      insideBound = false;\r\n\r\n      if (isActiveRef.current) {\r\n        setTimes((times) => ([...times, secondsRef.current]));\r\n      }\r\n\r\n      _reset();\r\n\r\n    } else {\r\n      isActiveRef.current = true;\r\n    }\r\n\r\n    setBalanceState(insideBound);\r\n  }\r\n\r\n  const _subscribe = () => {\r\n    if (typeof window.DeviceMotionEvent.requestPermission === 'function') {\r\n\r\n      // iOS 13+\r\n      window.DeviceMotionEvent.requestPermission()\r\n        .then(response => {\r\n          if (response === 'granted') {\r\n\r\n          }\r\n        })\r\n        .catch(console.error)\r\n\r\n    } else {\r\n      // non iOS 13+\r\n    }\r\n\r\n    _subscription = Gyroscope.addListener(gyroscopeData => {\r\n      _currentPosition = gyroscopeData;\r\n    });\r\n\r\n  };\r\n\r\n  const handleXSliderChange = (x) => {\r\n    setXThreshold(x);\r\n    xThresholdRef.current = x;\r\n  }  \r\n  \r\n  const handleYSliderChange = (y) => {\r\n    setYThreshold(y);\r\n    yThresholdRef.current = y;\r\n  }\r\n\r\n  const _unsubscribe = () => {\r\n    _subscription && _subscription.remove();\r\n    _subscription = null;\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <View style={balanceState ? styles.balanceContainer : styles.offContainer}>\r\n\r\n        <Text style={styles.text}>Instructions:</Text>\r\n        <Text style={styles.text}>Press start, and allow the app to use gyroscope data.</Text>\r\n        <Text style={styles.text}>Place phone face up in the center of your board.</Text>\r\n        <Text style={styles.text}>The background color will change if you are properly balanced, and the timer will start.</Text>\r\n\r\n        <div className=\"time\">\r\n          {seconds}s\r\n        </div>\r\n\r\n        <View style={styles.buttonContainer}>\r\n          <TouchableOpacity onPress={_toggle} style={styles.button}>\r\n            <Text>Start</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </View>\r\n\r\n      <Text>\r\n        These sliders can adjust the thresholds for pitch detection. The higher you go,\r\n        The less sensitive the app will be to fall detection.\r\n      </Text>\r\n      <Text>X Threshold (Side to side pitch)</Text>\r\n      <Text>{xThreshold}</Text>\r\n      <Slider\r\n        style={styles.slider}\r\n        maximumValue={10}\r\n        minimumValue={0}\r\n        minimumTrackTintColor=\"#307ecc\"\r\n        maximumTrackTintColor=\"#307ecc\"\r\n        step={0.1}\r\n        name=\"xThreshold\"\r\n        value={Threshold.POSITIVE_X}\r\n        onValueChange={handleXSliderChange}\r\n      />\r\n\r\n      <Text>Y Threshold (Back and forward pitch)</Text>\r\n      <Text>{yThreshold}</Text>\r\n      <Slider\r\n        style={styles.slider}\r\n        maximumValue={10}\r\n        minimumValue={0}\r\n        minimumTrackTintColor=\"#307ecc\"\r\n        maximumTrackTintColor=\"#307ecc\"\r\n        step={0.1}\r\n        name=\"yThreshold\"\r\n        value={Threshold.POSITIVE_Y}\r\n        onValueChange={handleYSliderChange}\r\n      />\r\n\r\n      {times.map((time) => {\r\n        return <Text style={styles.text}>\r\n          time: {time}\r\n        </Text>\r\n      })}\r\n\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  slider: {\r\n    flex: 1,\r\n    padding: 20,\r\n    justifyContent: 'center',\r\n    backgroundColor: '#ecf0f1',\r\n  },\r\n  buttonContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'stretch',\r\n    marginTop: 15,\r\n  },\r\n  button: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#eee',\r\n    padding: 10,\r\n  },\r\n  middleButton: {\r\n    borderLeftWidth: 1,\r\n    borderRightWidth: 1,\r\n    borderColor: '#ccc',\r\n  },\r\n  sensor: {\r\n    marginTop: 45,\r\n    paddingHorizontal: 10,\r\n  },\r\n  text: {\r\n    textAlign: 'center',\r\n  },\r\n  balanceContainer: {\r\n    backgroundColor: '#00872F',\r\n  },\r\n  offContainer: {\r\n    backgroundColor: '#820003',\r\n  },\r\n});\r\n","import { registerRootComponent } from 'expo';\r\n\r\nimport App from './App';\r\n\r\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\r\n// It also ensures that whether you load the app in the Expo client or in a native build,\r\n// the environment is set up appropriately\r\nregisterRootComponent(App);\r\n"],"sourceRoot":""}