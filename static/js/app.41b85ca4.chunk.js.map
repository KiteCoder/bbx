{"version":3,"sources":["web-build/register-service-worker.js","Threshold.js","App.js","index.js"],"names":["navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","Threshold","styles","StyleSheet","create","slider","flex","padding","justifyContent","backgroundColor","buttonContainer","flexDirection","alignItems","marginTop","button","middleButton","borderLeftWidth","borderRightWidth","borderColor","sensor","paddingHorizontal","text","textAlign","balanceContainer","offContainer","registerRootComponent","useKeepAwake","useState","balanceState","setBalanceState","seconds","setSeconds","times","setTimes","xThreshold","setXThreshold","yThreshold","setYThreshold","xThresholdRef","useRef","yThresholdRef","isActiveRef","secondsRef","_subscription","useEffect","interval","current","setInterval","updateTime","Math","round","clearInterval","_evaluateCurrentPosition","position","insideBound","x","y","_subscribe","DeviceMotionEvent","requestPermission","response","Gyroscope","addListener","gyroscopeData","_unsubscribe","remove","View","style","Text","className","TouchableOpacity","onPress","maximumValue","minimumValue","minimumTrackTintColor","maximumTrackTintColor","step","name","value","onValueChange","map","time"],"mappings":"oHAEI,kBAAmBA,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,8BAA+B,CAAEC,MAAO,UACjDC,MAAK,SAAUC,OAGfC,OAAM,SAAUC,GACfC,QAAQH,KAAK,oCAAqCE,U,uJCP7CE,EACG,IADHA,EAEG,I,iBC+KhB,IAAMC,EAASC,IAAWC,OAAO,CAC/BC,OAAQ,CACNC,KAAM,EACNC,QAAS,GACTC,eAAgB,SAChBC,gBAAiB,WAEnBC,gBAAiB,CACfC,cAAe,MACfC,WAAY,UACZC,UAAW,IAEbC,OAAQ,CACNR,KAAM,EACNE,eAAgB,SAChBI,WAAY,SACZH,gBAAiB,OACjBF,QAAS,IAEXQ,aAAc,CACZC,gBAAiB,EACjBC,iBAAkB,EAClBC,YAAa,QAEfC,OAAQ,CACNN,UAAW,GACXO,kBAAmB,IAErBC,KAAM,CACJC,UAAW,UAEbC,iBAAkB,CAChBd,gBAAiB,WAEnBe,aAAc,CACZf,gBAAiB,aChNrBgB,aDAe,WAGbC,cAH4B,MAKYC,oBAAS,GALrB,WAKrBC,EALqB,KAKPC,EALO,OAMEF,mBAAS,GANX,WAMrBG,EANqB,KAMZC,EANY,OAOIJ,oBAAS,GAPb,wBAQFA,mBAAS,KARP,WAQrBK,EARqB,KAQdC,EARc,OAUQN,mBAAS1B,GAVjB,WAUrBiC,EAVqB,KAUTC,EAVS,OAWQR,mBAAS1B,GAXjB,WAWrBmC,EAXqB,KAWTC,EAXS,KAatBC,EAAgBC,iBAAOL,GACvBM,EAAgBD,iBAAOH,GAEvBK,EAAcF,mBACdG,EAAaH,iBAAOT,GAEtBa,EAAgB,KAOpBC,qBAAU,WACR,IAAIC,EAAW,KAUf,OATIJ,EAAYK,QACdD,EAAWE,aAAY,WACrB,IAAMC,EAAaC,KAAKC,MA5BZ,GA4BkBpB,EAAsB,GA5BxC,GA6BZC,GAAW,SAAAD,GAAO,OAAIkB,KACtBN,EAAWI,QAAUE,IACpB,KACOP,EAAYK,SAAuB,IAAZhB,GACjCqB,cAAcN,GAET,kBAAMM,cAAcN,MAC1B,CAACJ,EAAYK,QAAShB,IAEzB,IAUMsB,EAA2B,SAACC,GAEhC,IAAIC,GAAc,EAEdD,EAASE,EAAIjB,EAAcQ,SAC7BO,EAASE,GAAM,EAAKjB,EAAcQ,SAClCO,EAASG,EAAIhB,EAAcM,SAC3BO,EAASG,GAAM,EAAKhB,EAAcM,SAElCQ,GAAc,EAEVb,EAAYK,SACdb,GAAS,SAACD,GAAD,oBAAgBA,GAAhB,CAAuBU,EAAWI,aAxC/Cf,EAAW,GACXU,EAAYK,SAAU,GA6CpBL,EAAYK,SAAU,EAGxBjB,EAAgByB,IAGZG,EAAa,WACyC,oBAA/ClE,OAAOmE,kBAAkBC,mBAGlCpE,OAAOmE,kBAAkBC,oBACtB/D,MAAK,SAAAgE,OAKL9D,MAAME,QAAQD,OAMnB4C,EAAgBkB,IAAUC,aAAY,SAAAC,GACpCX,EAAyBW,OAevBC,EAAe,WACnBrB,GAAiBA,EAAcsB,SAC/BtB,EAAgB,MAGlB,OACE,kBAACuB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAMC,MAAOvC,EAAe1B,EAAOqB,iBAAmBrB,EAAOsB,cAE3D,kBAAC4C,EAAA,EAAD,CAAMD,MAAOjE,EAAOmB,MAApB,iBACA,kBAAC+C,EAAA,EAAD,CAAMD,MAAOjE,EAAOmB,MAApB,yDACA,kBAAC+C,EAAA,EAAD,CAAMD,MAAOjE,EAAOmB,MAApB,oDACA,kBAAC+C,EAAA,EAAD,CAAMD,MAAOjE,EAAOmB,MAApB,4FAEA,yBAAKgD,UAAU,QACZvC,EADH,KAIA,kBAACoC,EAAA,EAAD,CAAMC,MAAOjE,EAAOQ,iBAClB,kBAAC4D,EAAA,EAAD,CAAkBC,QArFV,WACV5B,GACFqB,IACAvB,EAAYK,SAAU,IAEtBW,IACAhB,EAAYK,SAAU,IA+EkBqB,MAAOjE,EAAOY,QAChD,kBAACsD,EAAA,EAAD,iBAKN,kBAACA,EAAA,EAAD,8IAIA,kBAACA,EAAA,EAAD,yCACA,kBAACA,EAAA,EAAD,KAAOlC,GACP,kBAAC,IAAD,CACEiC,MAAOjE,EAAOG,OACdmE,aAAc,GACdC,aAAc,EACdC,sBAAsB,UACtBC,sBAAsB,UACtBC,KAAM,GACNC,KAAK,aACLC,MAAO7E,EACP8E,cAlDsB,SAACxB,GAC3BpB,EAAcoB,GACdjB,EAAcQ,QAAUS,KAmDtB,kBAACa,EAAA,EAAD,6CACA,kBAACA,EAAA,EAAD,KAAOhC,GACP,kBAAC,IAAD,CACE+B,MAAOjE,EAAOG,OACdmE,aAAc,GACdC,aAAc,EACdC,sBAAsB,UACtBC,sBAAsB,UACtBC,KAAM,GACNC,KAAK,aACLC,MAAO7E,EACP8E,cA3DsB,SAACvB,GAC3BnB,EAAcmB,GACdhB,EAAcM,QAAUU,KA4DrBxB,EAAMgD,KAAI,SAACC,GACV,OAAO,kBAACb,EAAA,EAAD,CAAMD,MAAOjE,EAAOmB,MAApB,SACE4D,Y","file":"static/js/app.41b85ca4.chunk.js","sourcesContent":["/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/bbx/expo-service-worker.js', { scope: '/bbx/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","/**\r\n * Balance Thresholds \r\n */\r\nexport const Threshold = {\r\n    POSITIVE_X: 2.3,\r\n    POSITIVE_Y: 4.3\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport { StyleSheet, Dimensions, Text, TouchableOpacity, View } from 'react-native';\nimport { useKeepAwake } from 'expo-keep-awake';\nimport { Gyroscope } from 'expo-sensors';\nimport { Threshold } from './Threshold';\nimport Slider from '@react-native-community/slider';\n\nexport default function App() {\n\n  const PRECISION = 10;\n  useKeepAwake();\n\n  const [balanceState, setBalanceState] = useState(false);\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [times, setTimes] = useState([]);\n\n  const [xThreshold, setXThreshold] = useState(Threshold.POSITIVE_X);\n  const [yThreshold, setYThreshold] = useState(Threshold.POSITIVE_Y);\n\n  const xThresholdRef = useRef(xThreshold);\n  const yThresholdRef = useRef(yThreshold);\n\n  const isActiveRef = useRef();\n  const secondsRef = useRef(seconds);\n\n  let _subscription = null;\n\n  const _reset = () => {\n    setSeconds(0.0);\n    isActiveRef.current = false;\n  }\n\n  useEffect(() => {\n    let interval = null;\n    if (isActiveRef.current) {\n      interval = setInterval(() => {\n        const updateTime = Math.round(seconds * PRECISION + 0.1 * PRECISION) / PRECISION;\n        setSeconds(seconds => updateTime);\n        secondsRef.current = updateTime;\n      }, 100);\n    } else if (!isActiveRef.current && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActiveRef.current, seconds]);\n\n  const _toggle = () => {\n    if (_subscription) {\n      _unsubscribe();\n      isActiveRef.current = false;\n    } else {\n      _subscribe();\n      isActiveRef.current = true;\n    }\n  };\n\n  const _evaluateCurrentPosition = (position) => {\n\n    let insideBound = true;\n\n    if (position.x > xThresholdRef.current ||\n      position.x < (-1) * xThresholdRef.current||\n      position.y > yThresholdRef.current ||\n      position.y < (-1) * yThresholdRef.current) {\n\n      insideBound = false;\n\n      if (isActiveRef.current) {\n        setTimes((times) => ([...times, secondsRef.current]));\n      }\n\n      _reset();\n\n    } else {\n      isActiveRef.current = true;\n    }\n\n    setBalanceState(insideBound);\n  }\n\n  const _subscribe = () => {\n    if (typeof window.DeviceMotionEvent.requestPermission === 'function') {\n\n      // iOS 13+\n      window.DeviceMotionEvent.requestPermission()\n        .then(response => {\n          if (response === 'granted') {\n\n          }\n        })\n        .catch(console.error)\n\n    } else {\n      // non iOS 13+\n    }\n\n    _subscription = Gyroscope.addListener(gyroscopeData => {\n      _evaluateCurrentPosition(gyroscopeData);\n    });\n\n  };\n\n  const handleXSliderChange = (x) => {\n    setXThreshold(x);\n    xThresholdRef.current = x;\n  }  \n  \n  const handleYSliderChange = (y) => {\n    setYThreshold(y);\n    yThresholdRef.current = y;\n  }\n\n  const _unsubscribe = () => {\n    _subscription && _subscription.remove();\n    _subscription = null;\n  };\n\n  return (\n    <View>\n      <View style={balanceState ? styles.balanceContainer : styles.offContainer}>\n\n        <Text style={styles.text}>Instructions:</Text>\n        <Text style={styles.text}>Press start, and allow the app to use gyroscope data.</Text>\n        <Text style={styles.text}>Place phone face up in the center of your board.</Text>\n        <Text style={styles.text}>The background color will change if you are properly balanced, and the timer will start.</Text>\n\n        <div className=\"time\">\n          {seconds}s\n        </div>\n\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity onPress={_toggle} style={styles.button}>\n            <Text>Start</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      <Text>\n        These sliders can adjust the thresholds for pitch detection. The higher you go,\n        The less sensitive the app will be to fall detection.\n      </Text>\n      <Text>X Threshold (Side to side pitch)</Text>\n      <Text>{xThreshold}</Text>\n      <Slider\n        style={styles.slider}\n        maximumValue={10}\n        minimumValue={0}\n        minimumTrackTintColor=\"#307ecc\"\n        maximumTrackTintColor=\"#307ecc\"\n        step={0.1}\n        name=\"xThreshold\"\n        value={Threshold.POSITIVE_X}\n        onValueChange={handleXSliderChange}\n      />\n\n      <Text>Y Threshold (Back and forward pitch)</Text>\n      <Text>{yThreshold}</Text>\n      <Slider\n        style={styles.slider}\n        maximumValue={10}\n        minimumValue={0}\n        minimumTrackTintColor=\"#307ecc\"\n        maximumTrackTintColor=\"#307ecc\"\n        step={0.1}\n        name=\"yThreshold\"\n        value={Threshold.POSITIVE_Y}\n        onValueChange={handleYSliderChange}\n      />\n\n      {times.map((time) => {\n        return <Text style={styles.text}>\n          time: {time}\n        </Text>\n      })}\n\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  slider: {\n    flex: 1,\n    padding: 20,\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n  sensor: {\n    marginTop: 45,\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  balanceContainer: {\n    backgroundColor: '#00872F',\n  },\n  offContainer: {\n    backgroundColor: '#820003',\n  },\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}