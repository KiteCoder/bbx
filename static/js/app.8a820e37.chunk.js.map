{"version":3,"sources":["web-build/register-service-worker.js","Threashold.js","App.js","index.js"],"names":["navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","Threashold","styles","StyleSheet","create","buttonContainer","flexDirection","alignItems","marginTop","button","flex","justifyContent","backgroundColor","padding","middleButton","borderLeftWidth","borderRightWidth","borderColor","sensor","paddingHorizontal","text","textAlign","balanceContainer","offContainer","registerRootComponent","useKeepAwake","useState","balanceState","setBalanceState","seconds","setSeconds","times","setTimes","isActiveRef","useRef","secondsRef","_subscription","useEffect","interval","current","setInterval","updateTime","Math","round","clearInterval","_evaluateCurrentPosition","position","insideBound","x","y","_subscribe","DeviceMotionEvent","requestPermission","response","Gyroscope","addListener","gyroscopeData","_unsubscribe","remove","View","style","Text","className","TouchableOpacity","onPress","map","time"],"mappings":"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","file":"static/js/app.8a820e37.chunk.js","sourcesContent":["/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/bbx/expo-service-worker.js', { scope: '/bbx/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","/**\r\n * Balance Threasholds \r\n */\r\nexport const Threashold = {\r\n    POSITIVE_X: 2.3,\r\n    NEGATIVE_X: -2.3,\r\n\r\n    POSITIVE_Y: 4.3,\r\n    NEGATIVE_Y: -4.3\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { useKeepAwake } from 'expo-keep-awake';\nimport { Gyroscope } from 'expo-sensors';\nimport { Threashold } from './Threashold';\n\nexport default function App() {\n\n  const PRECISION = 10;\n  useKeepAwake();\n\n  const [balanceState, setBalanceState] = useState(false);\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [times, setTimes] = useState([]);\n  \n  const isActiveRef = useRef();\n  const secondsRef = useRef(seconds);\n\n  let _subscription = null;\n\n  const _reset = () => {\n    setSeconds(0.0);\n    isActiveRef.current = false;\n  }\n\n  useEffect(() => {\n    let interval = null;\n    if (isActiveRef.current) {\n      interval = setInterval(() => {\n        const updateTime = Math.round(seconds * PRECISION + 0.1 * PRECISION) / PRECISION;\n        setSeconds(seconds => updateTime);\n        secondsRef.current = updateTime;\n      }, 100);\n    } else if (!isActiveRef.current && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActiveRef.current, seconds]);\n\n  const _toggle = () => {\n    if (_subscription) {\n      _unsubscribe();\n      isActiveRef.current = false;\n    } else {\n      _subscribe();\n      isActiveRef.current = true;\n    }\n  };\n\n  const _evaluateCurrentPosition = (position) => {\n\n    let insideBound = true;\n\n    if (position.x > Threashold.POSITIVE_X ||\n      position.x < Threashold.NEGATIVE_X ||\n      position.y > Threashold.POSITIVE_Y ||\n      position.y < Threashold.NEGATIVE_Y) {\n\n      insideBound = false;\n\n      if(isActiveRef.current){\n        setTimes((times) => ([...times, secondsRef.current]));\n      }\n\n      _reset();\n\n    } else {\n      isActiveRef.current = true;\n    }\n\n    setBalanceState(insideBound);\n  }\n\n\n  const _subscribe = () => {\n\n    if (typeof window.DeviceMotionEvent.requestPermission === 'function') {\n\n      // iOS 13+\n      window.DeviceMotionEvent.requestPermission()\n        .then(response => {\n          if (response === 'granted') {\n\n          }\n        })\n        .catch(console.error)\n\n    } else {\n      // non iOS 13+\n    }\n\n    _subscription = Gyroscope.addListener(gyroscopeData => {\n      _evaluateCurrentPosition(gyroscopeData);\n    });\n\n  };\n\n  const _unsubscribe = () => {\n    _subscription && _subscription.remove();\n    _subscription = null;\n  };\n\n  return (\n    <View style={balanceState ? styles.balanceContainer : styles.offContainer}>\n      <View style={styles.sensor}>\n\n        <Text style={styles.text}>Instructions:</Text>\n        <Text style={styles.text}>Press start, and allow the app to use gyroscope data.</Text>\n        <Text style={styles.text}>Place phone face up in the center of your board.</Text>\n        <Text style={styles.text}>The background color will change if you are properly balanced, and the timer will start.</Text>\n\n        <div className=\"time\">\n          {seconds}s\n        </div>\n\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity onPress={_toggle} style={styles.button}>\n            <Text>Start</Text>\n          </TouchableOpacity>\n        </View>\n\n        {times.map((time) => {\n          return <Text style={styles.text}>\n            time: {time}\n          </Text>\n        })}\n\n      </View>\n    </View>\n  );\n}\n\nfunction round(n) {\n  if (!n) {\n    return 0;\n  }\n\n  return Math.floor(n * 100) / 100;\n}\n\nconst styles = StyleSheet.create({\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n  sensor: {\n    marginTop: 45,\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  balanceContainer: {\n    backgroundColor: '#00872F',\n  },\n  offContainer: {\n    backgroundColor: '#820003',\n  },\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}